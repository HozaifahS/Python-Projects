
import turtle
import time
import random

#Score variables
score = 0
high_score = 0

delay = 0.1

#Set up the screen

display = turtle.Screen()
display.title("The Snake Game")
display.bgcolor("green")
display.setup(width=600, height=600)
display.tracer(0)

# Snake Head
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("black")
head.penup()
head.goto(0, 0)
head.direction = "stop"

#Food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0, 100)


segments = []

#Score
pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0, 260)
pen.write("Score = 0  High Score = 0", align = "center", font = ("Courier", 24, "normal"))



#Functions for directions
def go_up():
    if head.direction != "down":
        head.direction = "up"

def go_down():
    if head.direction != "up":
        head.direction = "down"

def go_left():
    if head.direction != "right":
        head.direction = "left"

def go_right():
    if head.direction != "left":
        head.direction = "right"
    
def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)
    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)
    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)
    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)
        
# Key Board Bindings
display.listen()
display.onkeypress(go_up, "w")
display.onkeypress(go_down, "s")
display.onkeypress(go_left, "a")
display.onkeypress(go_right, "d")
        
#Main game loop
while True:
    display.update()

    if head.distance(food) < 20:
        #Randomly Move the food
        x = random.randint(-290, 290)
        y = random.randint(-290, 290)
        food.goto(x, y)

        #Add a segment/body every collision
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("black")
        new_segment.penup()
        segments.append(new_segment)

        #Make the snake go faster
        delay -= 0.001

        

        #Increase the score
        score += 10

        if score > high_score:
            high_score = score

        pen.clear()
        pen.write("Score : {}  High Score : {}".format(score, high_score),align = "center", font = ("Courier", 24, "normal"))

        

    #Move the part to the head
    for index in range(len(segments) -1, 0, -1):
        x = segments[index -1].xcor()
        y = segments[index -1].ycor()
        segments[index].goto(x, y)


    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x, y)

    move()

    #Collision in between body
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0, 0)
            head.direction = "stop"

            #Hide the segments
            for segment in segments:
                segment.goto(1000, 1000)

            #Clear
                segments = []

            #Reset score
            score = 0

            #Reset speed

            delay = 0.1

            pen.clear()
            pen.write("Score : {}  High Score : {}".format(score, high_score),align = "center", font = ("Courier", 24, "normal"))


    #Collision with borderlines
    if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
        time.sleep(1)
        head.goto(0, 0)
        head.direction = "stop"

        #Clear the segments
        for segment in segments:
            segment.goto(1000, 1000)

        segments = []

        #Reset score
        score = 0

        #Reset speed

        delay = 0.1
        
        pen.clear()
        pen.write("Score : {}  High Score : {}".format(score, high_score),align = "center", font = ("Courier", 24, "normal"))
            
        



    time.sleep(delay)


display.mainloop()
